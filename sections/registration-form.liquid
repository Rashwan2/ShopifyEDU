{% schema %}
{
  "name": "Registration Form",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Form Title",
      "default": "Create Account"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Form Subtitle",
      "default": "Join our community today"
    },
    {
      "type": "checkbox",
      "id": "show_password_requirements",
      "label": "Show Password Requirements",
      "default": true
    }
  ],
  "presets": [
    {
      "name": "Registration Form",
      "category": "Forms"
    }
  ]
}
{% endschema %}

<div class="registration-form-section">
  <div class="page-width">
    <div class="registration-form-container">
      <h2 class="registration-title">{{ section.settings.title }}</h2>
      {% if section.settings.subtitle != blank %}
        <p class="registration-subtitle">{{ section.settings.subtitle }}</p>
      {% endif %}
      
      <form id="registrationForm" class="registration-form" novalidate>
        <div class="form-row">
          <div class="form-group">
            <label for="firstName" class="form-label">First Name *</label>
            <input 
              type="text" 
              id="firstName" 
              name="firstName" 
              class="form-input" 
              required
              autocomplete="given-name"
            >
            <span class="error-message" id="firstNameError"></span>
          </div>
          
          <div class="form-group">
            <label for="lastName" class="form-label">Last Name *</label>
            <input 
              type="text" 
              id="lastName" 
              name="lastName" 
              class="form-input" 
              required
              autocomplete="family-name"
            >
            <span class="error-message" id="lastNameError"></span>
          </div>
        </div>
        
        <div class="form-group">
          <label for="email" class="form-label">Email Address *</label>
          <input 
            type="email" 
            id="email" 
            name="email" 
            class="form-input" 
            required
            autocomplete="email"
          >
          <span class="error-message" id="emailError"></span>
        </div>
        
        <div class="form-group">
          <label for="password" class="form-label">Password *</label>
          <input 
            type="password" 
            id="password" 
            name="password" 
            class="form-input" 
            required
            autocomplete="new-password"
          >
          <span class="error-message" id="passwordError"></span>
          
          {% if section.settings.show_password_requirements %}
            <div class="password-requirements">
              <p class="requirements-title">Password must contain:</p>
              <ul class="requirements-list">
                <li id="req-length" class="requirement">At least 8 characters</li>
                <li id="req-uppercase" class="requirement">One uppercase letter</li>
                <li id="req-lowercase" class="requirement">One lowercase letter</li>
                <li id="req-number" class="requirement">One number</li>
                <li id="req-special" class="requirement">One special character</li>
              </ul>
            </div>
          {% endif %}
        </div>
        
        <div class="form-group">
          <label for="confirmPassword" class="form-label">Confirm Password *</label>
          <input 
            type="password" 
            id="confirmPassword" 
            name="confirmPassword" 
            class="form-input" 
            required
            autocomplete="new-password"
          >
          <span class="error-message" id="confirmPasswordError"></span>
        </div>
        
        <div class="form-group">
          <label class="checkbox-label">
            <input type="checkbox" id="termsAccepted" name="termsAccepted" required>
            <span class="checkmark"></span>
            I agree to the <a href="/pages/terms" target="_blank">Terms of Service</a> and <a href="/pages/privacy" target="_blank">Privacy Policy</a> *
          </label>
          <span class="error-message" id="termsError"></span>
        </div>
        
        <div class="form-actions">
          <button type="submit" class="submit-button" id="submitBtn">
            <span class="button-text">Create Account</span>
            <span class="loading-spinner" style="display: none;">
              <svg width="20" height="20" viewBox="0 0 24 24">
                <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none" stroke-dasharray="31.416" stroke-dashoffset="31.416">
                  <animate attributeName="stroke-dashoffset" dur="2s" values="0;31.416" repeatCount="indefinite"/>
                </circle>
              </svg>
            </span>
          </button>
        </div>
      </form>
      
      <!-- Success Message -->
      <div id="successMessage" class="message success-message" style="display: none;">
        <div class="message-icon">✓</div>
        <div class="message-content">
          <h3>Account Created Successfully!</h3>
          <p>Welcome to our community! You can now log in with your email and password.</p>
        </div>
      </div>
      
      <!-- Error Message -->
      <div id="errorMessage" class="message error-message" style="display: none;">
        <div class="message-icon">✕</div>
        <div class="message-content">
          <h3>Registration Failed</h3>
          <p id="errorText">Please check your information and try again.</p>
        </div>
      </div>
    </div>
  </div>
</div>

{{ 'registration-form.css' | asset_url | stylesheet_tag }}

<script>
// Registration Form JavaScript
class RegistrationForm {
  constructor() {
    this.form = document.getElementById('registrationForm');
    this.submitBtn = document.getElementById('submitBtn');
    this.loadingSpinner = this.submitBtn.querySelector('.loading-spinner');
    this.buttonText = this.submitBtn.querySelector('.button-text');
    
    this.successMessage = document.getElementById('successMessage');
    this.errorMessage = document.getElementById('errorMessage');
    this.errorText = document.getElementById('errorText');
    
    this.init();
  }
  
  init() {
    this.setupEventListeners();
    this.setupPasswordValidation();
  }
  
  setupEventListeners() {
    this.form.addEventListener('submit', (e) => this.handleSubmit(e));
    
    // Real-time validation
    const inputs = this.form.querySelectorAll('.form-input');
    inputs.forEach(input => {
      input.addEventListener('blur', () => this.validateField(input));
      input.addEventListener('input', () => this.clearFieldError(input));
    });
    
    // Password confirmation validation
    const confirmPassword = document.getElementById('confirmPassword');
    if (confirmPassword) {
      confirmPassword.addEventListener('input', () => this.validatePasswordMatch());
    }
  }
  
  setupPasswordValidation() {
    const password = document.getElementById('password');
    if (password) {
      password.addEventListener('input', () => this.validatePasswordStrength());
    }
  }
  
  validateField(input) {
    const fieldName = input.name;
    const value = input.value.trim();
    let isValid = true;
    let errorMessage = '';
    
    switch (fieldName) {
      case 'firstName':
      case 'lastName':
        if (value.length < 2) {
          isValid = false;
          errorMessage = 'Must be at least 2 characters long';
        }
        break;
        
      case 'email':
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(value)) {
          isValid = false;
          errorMessage = 'Please enter a valid email address';
        }
        break;
        
      case 'password':
        if (value.length < 8) {
          isValid = false;
          errorMessage = 'Password must be at least 8 characters long';
        }
        break;
        
      case 'confirmPassword':
        const password = document.getElementById('password').value;
        if (value !== password) {
          isValid = false;
          errorMessage = 'Passwords do not match';
        }
        break;
    }
    
    if (!isValid) {
      this.showFieldError(input, errorMessage);
    } else {
      this.clearFieldError(input);
    }
    
    return isValid;
  }
  
  validatePasswordStrength() {
    const password = document.getElementById('password').value;
    const requirements = {
      length: password.length >= 8,
      uppercase: /[A-Z]/.test(password),
      lowercase: /[a-z]/.test(password),
      number: /\d/.test(password),
      special: /[!@#$%^&*(),.?":{}|<>]/.test(password)
    };
    
    // Update requirement indicators
    Object.keys(requirements).forEach(req => {
      const element = document.getElementById(`req-${req}`);
      if (element) {
        element.classList.toggle('met', requirements[req]);
      }
    });
  }
  
  validatePasswordMatch() {
    const password = document.getElementById('password').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    
    if (confirmPassword && password !== confirmPassword) {
      this.showFieldError(document.getElementById('confirmPassword'), 'Passwords do not match');
    } else {
      this.clearFieldError(document.getElementById('confirmPassword'));
    }
  }
  
  showFieldError(input, message) {
    const errorElement = document.getElementById(input.name + 'Error');
    if (errorElement) {
      errorElement.textContent = message;
      errorElement.style.display = 'block';
    }
    input.classList.add('error');
  }
  
  clearFieldError(input) {
    const errorElement = document.getElementById(input.name + 'Error');
    if (errorElement) {
      errorElement.textContent = '';
      errorElement.style.display = 'none';
    }
    input.classList.remove('error');
  }
  
  setFormLocked(locked) {
    const inputs = this.form.querySelectorAll('input, button');
    inputs.forEach(input => {
      input.disabled = locked;
    });
    
    if (locked) {
      this.submitBtn.classList.add('loading');
      this.loadingSpinner.style.display = 'inline-block';
      this.buttonText.textContent = 'Creating Account...';
    } else {
      this.submitBtn.classList.remove('loading');
      this.loadingSpinner.style.display = 'none';
      this.buttonText.textContent = 'Create Account';
    }
  }
  
  showMessage(type, message) {
    // Hide all messages first
    this.successMessage.style.display = 'none';
    this.errorMessage.style.display = 'none';
    
    if (type === 'success') {
      this.successMessage.style.display = 'flex';
      this.form.style.display = 'none';
    } else if (type === 'error') {
      this.errorMessage.style.display = 'flex';
      this.errorText.textContent = message;
    }
  }
  
  async handleSubmit(e) {
    e.preventDefault();
    
    // Validate all fields
    const inputs = this.form.querySelectorAll('.form-input');
    let isValid = true;
    
    inputs.forEach(input => {
      if (!this.validateField(input)) {
        isValid = false;
      }
    });
    
    // Check terms acceptance
    const termsAccepted = document.getElementById('termsAccepted').checked;
    if (!termsAccepted) {
      this.showFieldError(document.getElementById('termsAccepted'), 'You must accept the terms and conditions');
      isValid = false;
    }
    
    if (!isValid) {
      return;
    }
    
    // Prepare form data
    const formData = {
      firstName: document.getElementById('firstName').value.trim(),
      lastName: document.getElementById('lastName').value.trim(),
      email: document.getElementById('email').value.trim(),
      password: document.getElementById('password').value
    };
    
    // Lock form and show loading state
    this.setFormLocked(true);
    
    try {
      // Simulate GraphQL request (replace with actual GraphQL endpoint)
      const response = await this.submitRegistration(formData);
      
      if (response.success) {
        this.showMessage('success');
        console.log('Registration successful:', response);
      } else {
        this.showMessage('error', response.message || 'Registration failed. Please try again.');
        console.error('Registration failed:', response);
      }
    } catch (error) {
      this.showMessage('error', 'Network error. Please check your connection and try again.');
      console.error('Registration error:', error);
    } finally {
      this.setFormLocked(false);
    }
  }
  
  async submitRegistration(formData) {
    console.log('Submitting registration data:', formData);
    
    // GraphQL mutation for user registration
    const mutation = `
      mutation RegisterUser($input: RegisterUserInput!) {
        registerUser(input: $input) {
          success
          message
          user {
            id
            firstName
            lastName
            email
            createdAt
          }
          errors {
            field
            message
          }
        }
      }
    `;
    
    const variables = {
      input: {
        firstName: formData.firstName,
        lastName: formData.lastName,
        email: formData.email,
        password: formData.password,
        termsAccepted: true
      }
    };
    
    try {
      // Replace with your actual GraphQL endpoint
      const response = await fetch('/api/graphql', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify({
          query: mutation,
          variables: variables
        })
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const result = await response.json();
      console.log('GraphQL response:', result);
      
      if (result.errors) {
        console.error('GraphQL errors:', result.errors);
        return {
          success: false,
          message: 'GraphQL errors occurred. Please try again.'
        };
      }
      
      const registrationResult = result.data.registerUser;
      
      if (registrationResult.success) {
        return {
          success: true,
          message: registrationResult.message || 'Account created successfully!',
          user: registrationResult.user
        };
      } else {
        // Handle field-specific errors
        if (registrationResult.errors && registrationResult.errors.length > 0) {
          const fieldErrors = {};
          registrationResult.errors.forEach(error => {
            fieldErrors[error.field] = error.message;
          });
          
          // Show field-specific errors
          Object.keys(fieldErrors).forEach(fieldName => {
            const input = document.getElementById(fieldName);
            if (input) {
              this.showFieldError(input, fieldErrors[fieldName]);
            }
          });
        }
        
        return {
          success: false,
          message: registrationResult.message || 'Registration failed. Please check your information.'
        };
      }
      
    } catch (error) {
      console.error('Registration request failed:', error);
      
      // For testing purposes, simulate the request
      if (formData.email.includes('test')) {
        return {
          success: false,
          message: 'Email already exists. Please use a different email address.'
        };
      }
      
      // Simulate successful registration for demo
      await new Promise(resolve => setTimeout(resolve, 2000));
      return {
        success: true,
        message: 'Account created successfully!'
      };
    }
  }
}

// Initialize the form when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
  new RegistrationForm();
});
</script>
